import streamlit as st
import subprocess, json, os, time, threading

st.set_page_config(layout="wide", page_title="Climate+Crowd Traffic Twin")
st.title("üåßÔ∏è Climate + Crowd Resilient Smart Traffic Twin (Demo)")

with st.sidebar:
    st.header("Scenario Controls")
    steps = st.number_input("Steps (‡§∏‡§Æ‡§Ø ‡§Ö‡§µ‡§ß‡§ø)", min_value=50, max_value=2000, value=300, step=50)
    st.caption("‡§Ø‡§π ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§® ‡§ï‡•á ‡§ö‡§≤‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à")
    
    weather = st.selectbox("Weather (‡§Æ‡•å‡§∏‡§Æ)", ["clear","rain","heat"])
    st.caption("‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: clear (‡§∏‡§æ‡§´), rain (‡§¨‡§æ‡§∞‡§ø‡§∂), heat (‡§ó‡§∞‡•ç‡§Æ‡•Ä)")
    
    crowd = st.slider("Crowd surge (‡§≠‡•Ä‡§°‡§º ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞)", 0.0, 1.0, 0.0, 0.1)
    st.caption("0.0 = ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≠‡•Ä‡§°‡§º, 1.0 = ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≠‡•Ä‡§°‡§º (‡§¶‡•ã‡§ó‡•Å‡§®‡•Ä)")
    st.caption("‡§Ö‡§ß‡§ø‡§ï ‡§≠‡•Ä‡§°‡§º ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ü‡•ç‡§∞‡•à‡§´‡§ø‡§ï ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à")
    
    start = st.button("Start Simulation (‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç)")

if "running" not in st.session_state:
    st.session_state.running = False

placeholder = st.empty()

def run_sim_thread(steps, weather, crowd):
    cmd = ["python", "src/run_sim.py", "--steps", str(steps), "--weather", weather, "--crowd", str(crowd)]
    proc = subprocess.Popen(cmd)
    proc.wait()

if start and not st.session_state.running:
    st.session_state.running = True
    placeholder.info("Simulation started... (check console for logs)")
    thread = threading.Thread(target=run_sim_thread, args=(steps, weather, crowd))
    thread.start()
    for i in range(1000):
        if os.path.exists("results/sim_out.json"):
            break
        time.sleep(0.2)
    if os.path.exists("results/sim_out.json"):
        data = json.load(open("results/sim_out.json"))
        st.success("Simulation finished, loading results...")
        last = data["metrics_log"][-1]
        st.write("Final state:", last["state"])
        st.write("Final metrics:", last["metrics"])
        times = [m["t"] for m in data["metrics_log"]]
        throughput = [m["metrics"]["throughput"] for m in data["metrics_log"]]
        import pandas as pd
        df = pd.DataFrame({"t":times, "throughput":throughput})
        
        # Adding chart with proper labels
        st.subheader("Traffic Throughput Over Time (‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ü‡•ç‡§∞‡•à‡§´‡§ø‡§ï ‡§™‡•ç‡§∞‡§µ‡§æ‡§π)")
        st.caption("X-axis: Time Steps (‡§∏‡§Æ‡§Ø) | Y-axis: Vehicles Throughput (‡§µ‡§æ‡§π‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ)")
        chart = st.line_chart(df.set_index("t"))
        
        # Adding more metrics visualization
        if "avg_wait" in last["metrics"]:
            st.subheader("Average Wait Time (‡§î‡§∏‡§§ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§∏‡§Æ‡§Ø)")
            st.metric("Average Wait Time", f"{last['metrics']['avg_wait']:.2f} seconds")
    else:
        st.error("Simulation did not produce results in time.")
    st.session_state.running = False
